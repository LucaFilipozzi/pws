#!/usr/bin/env ruby
#
# Copyright (C) 2015 Peter Palfrader
# Copyright (C) 2018 Luca Filipozzi
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'httparty'
require 'gpgme'
require 'magic'
require 'pathname'
require 'shell'
require 'tempfile'
require 'thor'
require 'yaml'

module CoreExtensions
  module File
    def self.included(base)
      base.extend(ClassMethods)
    end
    module ClassMethods
      def encrypted?(file)
        Magic.guess_file_mime_type(file) == 'application/pgp'
      end
    end
  end
  module GPGME
    module Key
      def self.included(base)
        base.extend(ClassMethods)
      end
      module ClassMethods
        def include?(fpr)
          not self.find(:public, fpr).empty?
        end
        def exclude?(fpr)
          not self.include?(fpr)
        end
      end
    end
  end
end

File.include CoreExtensions::File
GPGME::Key.include CoreExtensions::GPGME::Key

module App
  class Error < StandardError
  end

  class Editor
    def initialize
      editors = []
      unless ENV['EDITOR'].nil? or ENV['EDITOR'].empty?
        editor = Pathname.new(ENV['EDITOR'].chomp)
        if editor.absolute?
          editors.push(editor.cleanpath)
        else
          editors += Shell.default_system_path.collect{|x| File.join(x, editor)}
        end
      end
      editors += %w{/usr/bin/sensible-editor /usr/bin/editor /usr/bin/vi}
      @editor = editors.detect{|x| File.executable?(x)}
      raise Error, 'error: editor not found' unless @editor
    end

    def edit(content)
      tempfile = Tempfile.open('pws')
      tempfile.write(content)
      tempfile.close
      system(@editor, tempfile.path)
      IO.read(tempfile.path)
    end
  end

  class Crypto
    def initialize()
      @users = {}
      @groups = {}

      pwscfg = File.join(ENV['HOME'], '.pws.yaml')
      raise Error, "error: #{pwscfg} is not readable" unless File.readable?(pwscfg)

      yaml = YAML::load_file(pwscfg)
      key = 'trusted_users'
      raise Error, "error: #{pwscfg} has no '#{key}' key" unless yaml.has_key?(key)

      trusted_users = yaml[key]
      dir = Dir.pwd
      raise Error, "error: #{pwscfg} has no '#{key}/#{dir}' key" unless trusted_users.has_key?(dir)

      trusted_users_for_dir = trusted_users[dir]

      dircfg = File.join(dir, '.users')
      raise Error, "error: #{dircfg} is not readable" unless File.readable?(dircfg)

      valid = false
      lines = GPGME::Crypto.verify(IO.read(dircfg)) do |sig|
        valid = true if sig.valid? and trusted_users_for_dir.include?(sig.fpr)
      end.to_s
      raise Error, "error: #{dircfg} has invalid signature" unless valid

      lines.each_line do |line|
        next if line =~ /^#/
        next if line =~ /^$/
        if (m = /^(@[a-zA-Z0-9-]+)\s*=\s*(.*)$/.match(line))
          raise Error, "error: #{dircfg} has duplicate group: #{m[1]}" if @groups.has_key?(m[1])
          @groups[m[1]] = []
          m[2].split(/[\t ,]+/).each do |x|
            if x.start_with?('@')
              raise Error, "error: #{dircfg} has unknown group: #{x}" unless @groups.has_key?(x)
            else
              raise Error, "error: #{dircfg} has unknown user: #{x}" unless @users.has_key?(x)
            end
            @groups[m[1]].push(x)
          end
        elsif (m = /^([a-zA-Z0-9:-]+)\s*=\s*([0-9A-Fa-f]{40})\s*$/.match(line))
          raise Error, "error: #{dircfg} has duplicate user: #{m[1]}" if @users.has_key?(m[1])
          @users[m[1]] = m[2]
        else
          raise Error, "error: #{dircfg} has invalid line: #{line}"
        end
      end
    end

    def decrypt(content)
      raise Error, 'error: no content to decrypt' if content.nil? or content.empty?
      GPGME::Crypto.decrypt(content).to_s
    end

    def encrypt(content)
      raise Error, 'error: no content to encrypt' if content.nil? or content.empty?
      access = content.lines.first.chomp.sub!(/^access: /, '')
      raise Error, 'error: invalid access: empty' if access.nil? or access.empty?
      fprs = get_fprs(access)
      raise Error, 'error: no recipients of encryption' if fprs.nil? or fprs.empty?
      raise Error, 'error: no keys for some recipients' if fprs.any?{|x| GPGME::Key.exclude?(x)}
      GPGME::Crypto.encrypt(content, :armor => true, :always_trust => true, :recipients => fprs)
    end

    def display_keys
      @users.each_pair do |user,fpr|
        result = GPGME::Key.include?(fpr) ? 'have' : 'need'
        STDOUT.puts "#{result} #{fpr} for #{user}"
      end
    end

    def refresh_keys
      @users.each_pair do |user,fpr|
        STDOUT.print "refreshing #{fpr} for #{user}... "
        qry = "op=get&search=0x#{fpr}&options=mr"
        res = HTTParty.get("https://sks-keyservers.net/pks/lookup?#{qry}")
        if res.code == 200 and res.body.start_with?('-----BEGIN PGP PUBLIC KEY BLOCK-----')
          GPGME::Key.import(res.body)
          STDOUT.puts 'succeeded'
        else
          STDOUT.puts 'failed'
        end
      end
    end

    private

    def get_fprs(x)
      x.split(/[\t ,]+/).collect do |y|
        if y.start_with?('@')
          raise Error, "error: invalid access: unknown group '#{y}'" unless @groups.has_key?(y)
          @groups[y].collect{|z| get_fprs(z)} # recurse
        else
          raise Error, "error: invalid access: unknown user '#{y}'" unless @users.has_key?(y)
          [ @users[y] ] # flatten applies to arrays not strings
        end
      end.flatten.uniq
    end
  end

  class KeysSubcommand < Thor
    desc 'display', 'display keys'
    def display
      $crypto.display_keys
    end

    desc 'refresh', 'refresh keys'
    def refresh
      $crypto.refresh_keys
    end
  end

  class Commands < Thor
    desc 'add FILE', 'add file'
    def add(file)
      raise Error, "error: file #{file} already exists" if File.exists?(file)
      IO.write(file, $crypto.encrypt($editor.edit('access: FIXME')))
    end

    desc 'cat FILE', 'cat file'
    def cat(file)
      raise Error, "error: file #{file} is not encrypted" unless File.encrypted?(file)
      STDOUT.write($crypto.decrypt(IO.read(file)))
    end

    desc 'decrypt FILE', 'decrypt file'
    def decrypt(file)
      raise Error, "error: file #{file} is not encrypted" unless File.encrypted?(file)
      IO.write(file, $crypto.decrypt(IO.read(file)))
    end

    desc 'ls [PATH]', 'list directory entries'
    def ls(path=Dir.pwd)
      raise NotImplementedError
    end

    desc 'encrypt FILE', '(re-)encrypt file'
    def encrypt(file)
      content = File.encrypted?(file) ? $crypto.decrypt(IO.read(file)) : IO.read(file)
      IO.write(file, $crypto.encrypt(content))
    end

    desc 'edit FILE', 'edit file'
    def edit(file)
      old_content = $crypto.decrypt(IO.read(file))
      new_content = $editor.edit(old_content)
      IO.write(file, $crypto.encrypt(new_content)) unless new_content == old_content
    end

    desc 'keys <display|refresh>', 'display or refresh keys'
    subcommand 'keys', App::KeysSubcommand
  end
end

if __FILE__ == $0
  begin
    $editor = App::Editor.new
    $crypto = App::Crypto.new
  rescue App::Error => e
    $stderr.puts e
    exit 1
  end
  App::Commands.start
end

# vim: set ts=2 sw=2 et ai si fdm=indent:
